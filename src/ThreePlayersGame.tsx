import React, { useState } from 'react';
import { Trash as Treasure } from 'lucide-react';

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã
const CHEST_VALUES = { 1: 35, 2: 50, 3: 75 }; // –ù–∞–≥—Ä–∞–¥—ã –≤ —Å—É–Ω–¥—É–∫–∞—Ö: 35, 50, 75
const GAME_COST = 25; // üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã - 25 –º–æ–Ω–µ—Ç
const BANK_THRESHOLD = 100; // üìå –ü–æ—Ä–æ–≥ –±–∞–Ω–∫–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞
const BANK_RESERVE = 50; // üìå –†–µ–∑–µ—Ä–≤ –±–∞–Ω–∫–∞ –ø–æ—Å–ª–µ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è

const ThreePlayersGame: React.FC = () => {
  const [results, setResults] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [gameActive, setGameActive] = useState<boolean>(true);
  const [playerGold, setPlayerGold] = useState(100);
  const [bot1Gold, setBot1Gold] = useState(100);
  const [bot2Gold, setBot2Gold] = useState(100);
  const [bankGold, setBankGold] = useState(0); // –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –±–∞–Ω–∫–∞ = 0
  const [winStreak, setWinStreak] = useState<{ [key: string]: number }>({
    You: 0,
    "Bot 1": 0,
    "Bot 2": 0,
  });
  const [gameLog, setGameLog] = useState<string[]>([]);
  const [bankInDebt, setBankInDebt] = useState(false);

  const addToLog = (message: string) => {
    setGameLog(prev => [message, ...prev].slice(0, 10));
  };

  // –§—É–Ω–∫—Ü–∏—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –º–æ–Ω–µ—Ç –∏–∑ –±–∞–Ω–∫–∞ –ø—Ä–∏ –≤—ã–∏–≥—Ä—ã—à–µ –≤–∏–Ω—Å—Ç—Ä–∏–∫–∞
  const distributeBankGoldToWinner = (winner: string) => {
    if (bankGold >= BANK_THRESHOLD && winStreak[winner] === 2) { // –ù–∞ —ç—Ç–æ–º —Ö–æ–¥—É –±—É–¥–µ—Ç 3-—è –ø–æ–±–µ–¥–∞
      const bankReward = Math.max(0, bankGold); // –ë–∞–Ω–∫ –æ—Ç–¥–∞–µ—Ç –≤—Å–µ —Å–≤–æ–∏ –¥–µ–Ω—å–≥–∏
      if (bankReward > 0) {
        if (winner === "You") {
          setPlayerGold(prev => prev + bankReward);
        } else if (winner === "Bot 1") {
          setBot1Gold(prev => prev + bankReward);
        } else if (winner === "Bot 2") {
          setBot2Gold(prev => prev + bankReward);
        }
        setBankGold(0); // –ë–∞–Ω–∫ –æ—Å—Ç–∞–µ—Ç—Å—è –ø—É—Å—Ç—ã–º
        addToLog(`üî• ${winner} –≤—ã–∏–≥—Ä–∞–ª –≤–µ—Å—å –±–∞–Ω–∫ –≤ —Ä–∞–∑–º–µ—Ä–µ ${bankReward} –º–æ–Ω–µ—Ç!`);
        return true;
      }
    }
    return false;
  };

  const handleChestSelect = (chestNumber: number) => {
    if (!gameActive) return;
    setLoading(true);
    setGameActive(false);

    // –õ–æ–≥–∏–∫–∞ –≤—ã–±–æ—Ä–∞ —Å—É–Ω–¥—É–∫–∞
    const playerChoice = chestNumber;
    const bot1Choice = Math.floor(Math.random() * 3) + 1; // –í—ã–±–æ—Ä –∏–∑ 3 —Å—É–Ω–¥—É–∫–æ–≤
    const bot2Choice = Math.floor(Math.random() * 3) + 1; // –í—ã–±–æ—Ä –∏–∑ 3 —Å—É–Ω–¥—É–∫–æ–≤

    // üí∞ –ò–≥—Ä–æ–∫–∏ –ø–ª–∞—Ç—è—Ç –∑–∞ –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É
    setPlayerGold(prev => prev - GAME_COST);
    setBot1Gold(prev => prev - GAME_COST);
    setBot2Gold(prev => prev - GAME_COST);

    // –û–±—â–∏–π –±–∞–Ω–∫ –∑–∞ –∏–≥—Ä—É
    const totalBet = GAME_COST * 3; // 75 –º–æ–Ω–µ—Ç (3 –∏–≥—Ä–æ–∫–∞ –ø–æ 25 –º–æ–Ω–µ—Ç)

    // –°—á–∏—Ç–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤—ã–±–æ—Ä–æ–≤
    const allChoices = [playerChoice, bot1Choice, bot2Choice];
    const choiceCount: Record<number, number> = {};
    allChoices.forEach(choice => {
      choiceCount[choice] = (choiceCount[choice] || 0) + 1;
    });

    // –£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã
    const uniqueChoices = Object.keys(choiceCount)
      .map(Number)
      .filter(choice => choiceCount[choice] === 1);

    let winner = "No winner";
    let reward = 0;

    if (uniqueChoices.length > 0) {
      // –°–∞–º—ã–π –¥–æ—Ä–æ–≥–æ–π —É–Ω–∏–∫–∞–ª—å–Ω—ã–π —Å—É–Ω–¥—É–∫
      const bestChoice = uniqueChoices.reduce((best, choice) =>
        CHEST_VALUES[choice] > CHEST_VALUES[best] ? choice : best, uniqueChoices[0]);

      // –ö—Ç–æ –≤—ã–±—Ä–∞–ª —ç—Ç–æ—Ç —Å—É–Ω–¥—É–∫?
      if (playerChoice === bestChoice) {
        winner = "You";
        reward = CHEST_VALUES[bestChoice];
        setPlayerGold(prev => prev + reward);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –±–∞–Ω–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç
        setWinStreak(prev => ({
          ...prev,
          You: bankGold >= BANK_THRESHOLD ? prev.You + 1 : 0,
          "Bot 1": 0,
          "Bot 2": 0
        }));
      } else if (bot1Choice === bestChoice) {
        winner = "Bot 1";
        reward = CHEST_VALUES[bestChoice];
        setBot1Gold(prev => prev + reward);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –±–∞–Ω–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç
        setWinStreak(prev => ({
          ...prev,
          You: 0,
          "Bot 1": bankGold >= BANK_THRESHOLD ? prev["Bot 1"] + 1 : 0,
          "Bot 2": 0
        }));
      } else if (bot2Choice === bestChoice) {
        winner = "Bot 2";
        reward = CHEST_VALUES[bestChoice];
        setBot2Gold(prev => prev + reward);
        
        // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –≤ –±–∞–Ω–∫–µ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –º–æ–Ω–µ—Ç
        setWinStreak(prev => ({
          ...prev,
          You: 0,
          "Bot 1": 0,
          "Bot 2": bankGold >= BANK_THRESHOLD ? prev["Bot 2"] + 1 : 0
        }));
      }

      // üèÜ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ ‚Äì –æ–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –ë–ê–ù–ö
      distributeBankGoldToWinner(winner);

      // –û—Å—Ç–∞—Ç–æ–∫ –º–æ–Ω–µ—Ç —É—Ö–æ–¥–∏—Ç –≤ –ë–ê–ù–ö
      const remainingGold = totalBet - reward;
      setBankGold(prev => {
        const newBankGold = prev + remainingGold;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –±–∞–Ω–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã
        if (newBankGold > BANK_THRESHOLD) {
          // –ë–∞–Ω–∫ –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –º–æ–Ω–µ—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ
          addToLog(`üì¢ –ë–∞–Ω–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã!`);
        }
        if (newBankGold >= 0 && bankInDebt) {
          setBankInDebt(false);
          addToLog(`‚úÖ –ë–∞–Ω–∫ –≤—ã—à–µ–ª –∏–∑ –º–∏–Ω—É—Å–∞! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBankGold}`);
        }
        return newBankGold;
      });
    } else {
      // –ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤, –≤—Å–µ –º–æ–Ω–µ—Ç—ã —É—Ö–æ–¥—è—Ç –≤ –±–∞–Ω–∫
      setBankGold(prev => {
        const newBankGold = prev + totalBet;
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ—Ä–∞ –ª–∏ –±–∞–Ω–∫—É —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã
        if (newBankGold > BANK_THRESHOLD) {
          // –ë–∞–Ω–∫ –±—É–¥–µ—Ç —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—è—Ç—å –º–æ–Ω–µ—Ç—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º —Ä–∞—É–Ω–¥–µ
          addToLog(`üì¢ –ë–∞–Ω–∫ –≥–æ—Ç–æ–≤–∏—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–æ–Ω–µ—Ç—ã!`);
        }
        if (newBankGold >= 0 && bankInDebt) {
          setBankInDebt(false);
          addToLog(`‚úÖ –ë–∞–Ω–∫ –≤—ã—à–µ–ª –∏–∑ –º–∏–Ω—É—Å–∞! –¢–µ–∫—É—â–∏–π –±–∞–ª–∞–Ω—Å: ${newBankGold}`);
        }
        return newBankGold;
      });
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥ –¥–ª—è –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
      setWinStreak({
        You: 0,
        "Bot 1": 0,
        "Bot 2": 0
      });
      
      // –î–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –ª–æ–≥
      addToLog("–ù–∏—á—å—è! –í—Å–µ —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥ —Å–±—Ä–æ—à–µ–Ω—ã.");
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    setResults({
      winner,
      playerChoice,
      botChoices: [bot1Choice, bot2Choice],
      reward
    });

    setLoading(false);
  };

  const startNewRound = () => {
    setResults(null);
    setGameActive(true);
  };

  return (
    <div>
      {/* üéØ –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ */}
      <div className="grid grid-cols-3 gap-4 p-6 bg-amber-100 rounded-lg">
        {[1, 2, 3].map(chest => (
          <button
            key={chest}
            onClick={() => handleChestSelect(chest)}
            disabled={!gameActive || loading}
            className={`
              p-6 rounded-lg shadow-lg flex flex-col items-center justify-center
              ${loading ? 'opacity-50 cursor-not-allowed' : 'cursor-pointer'}
              ${!gameActive ? 'opacity-50 cursor-not-allowed' : 'hover:bg-amber-300'}
              bg-amber-400 text-amber-900 transition-all
            `}
          >
            <Treasure className="h-12 w-12 mb-2" />
            <span className="font-bold">–°—É–Ω–¥—É–∫ {chest}</span>
            <span className="text-sm">({CHEST_VALUES[chest]} –º–æ–Ω–µ—Ç)</span>
          </button>
        ))}
      </div>

      {results && (
        <div className="flex justify-center mt-6">
          <button 
            className="px-5 py-3 bg-blue-500 text-white text-lg font-bold rounded-lg shadow-md hover:bg-blue-700 transition"
            onClick={startNewRound}
          >
            üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
          </button>
        </div>
      )}

      {/* üåü –ë–∞–Ω–∫ */}
      <div className="mt-6 p-4 bg-gray-100 rounded-lg shadow-md text-center">
        <h2 className="text-lg font-bold">üè¶ –ë–∞–Ω–∫: {bankGold} –º–æ–Ω–µ—Ç {bankInDebt && "üö®"}</h2>
        {bankGold >= BANK_THRESHOLD && <p className="text-red-500 font-semibold">üî• –ë–∞–Ω–∫ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å!</p>}
        {bankInDebt && <p className="text-red-500 font-semibold">üö® –ë–∞–Ω–∫ –≤ –º–∏–Ω—É—Å–µ!</p>}
      </div>

      {/* üåü –û–±—â–∏–π —Å—á—ë—Ç + —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ */}
      <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-2 gap-4">
        {/* –û–±—â–∏–π —Å—á—ë—Ç (—Å–ª–µ–≤–∞) */}
        <div className="text-center">
          <h2 className="text-lg font-bold mb-2">üí∞ –û–±—â–∏–π —Å—á—ë—Ç</h2>
          <ul className="text-sm text-gray-700">
            <li className={`py-1 ${playerGold < 0 ? "text-red-500" : ""}`}>
              You: {playerGold} –º–æ–Ω–µ—Ç{" "}
              {winStreak.You >= 3 ? "üî•üî•üî•" : winStreak.You === 2 ? "üî•üî•" : bankGold >= BANK_THRESHOLD ? `(üî• ${winStreak.You} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥)` : ""}
            </li>
            <li className={`py-1 ${bot1Gold < 0 ? "text-red-500" : ""}`}>
              Bot 1: {bot1Gold} –º–æ–Ω–µ—Ç{" "}
              {winStreak["Bot 1"] >= 3 ? "üî•üî•üî•" : winStreak["Bot 1"] === 2 ? "üî•üî•" : bankGold >= BANK_THRESHOLD ? `(üî• ${winStreak["Bot 1"]} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥)` : ""}
            </li>
            <li className={`py-1 ${bot2Gold < 0 ? "text-red-500" : ""}`}>
              Bot 2: {bot2Gold} –º–æ–Ω–µ—Ç{" "}
              {winStreak["Bot 2"] >= 3 ? "üî•üî•üî•" : winStreak["Bot 2"] === 2 ? "üî•üî•" : bankGold >= BANK_THRESHOLD ? `(üî• ${winStreak["Bot 2"]} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥)` : ""}
            </li>
          </ul>
        </div>

        {/* –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ (—Å–ø—Ä–∞–≤–∞) */}
        {results && (
          <div className="text-center">
            <h2 className="text-lg font-bold mb-2">üé≤ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥</h2>
            <p className="text-lg font-semibold">
              {results.winner !== "No winner" ? `üèÜ ${results.winner} –≤—ã–∏–≥—Ä–∞–ª ${results.reward} –º–æ–Ω–µ—Ç!` : "–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª."}
            </p>
            <ul className="text-sm text-gray-700 mt-2">
              <li className="font-semibold">üßë –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—É–Ω–¥—É–∫ {results.playerChoice}</li>
              {results.botChoices.map((choice: number, index: number) => (
                <li key={index}>ü§ñ –ë–æ—Ç {index + 1} –≤—ã–±—Ä–∞–ª —Å—É–Ω–¥—É–∫ {choice}</li>
              ))}
            </ul>
          </div>
        )}
      </div>

      {/* üåü –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã */}
      <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md">
        <h2 className="text-xl font-bold text-center mb-2">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</h2>
        <ul className="text-sm space-y-1 text-gray-700">
          <li>‚Ä¢ –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ 2 –±–æ—Ç–æ–≤</li>
          <li>‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å—É–Ω–¥—É–∫–µ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞: 35, 50, 75 –º–æ–Ω–µ—Ç</li>
          <li>‚Ä¢ –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–æ–ª–æ—Ç–æ</li>
          <li>‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—É–Ω–¥—É–∫, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∑–æ–ª–æ—Ç–æ</li>
          <li className="font-semibold">‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä–∞—É–Ω–¥–µ: {GAME_COST} –º–æ–Ω–µ—Ç</li>
          <li>‚Ä¢ üè¶ <span className="font-semibold">–ë–∞–Ω–∫</span>: –Ω–µ—Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –±–∞–Ω–∫</li>
          <li>‚Ä¢ üî• –ö–æ–≥–¥–∞ –≤ –±–∞–Ω–∫–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è {BANK_THRESHOLD} –º–æ–Ω–µ—Ç, –µ–≥–æ –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å</li>
          <li>‚Ä¢ üèÜ –°–µ—Ä–∏—è –ø–æ–±–µ–¥ –Ω–∞—á–∏–Ω–∞–µ—Ç —Å—á–∏—Ç–∞—Ç—å—Å—è —Ç–æ–ª—å–∫–æ —Ç–æ–≥–¥–∞, –∫–æ–≥–¥–∞ –≤ –±–∞–Ω–∫–µ –µ—Å—Ç—å —Ö–æ—Ç—è –±—ã {BANK_THRESHOLD} –º–æ–Ω–µ—Ç</li>
          <li>‚Ä¢ üèÜ –ü—Ä–∏ —Å–µ—Ä–∏–∏ –∏–∑ 3 –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥ –∏–≥—Ä–æ–∫ –∑–∞–±–∏—Ä–∞–µ—Ç –≤–µ—Å—å –±–∞–Ω–∫</li>
          <li>‚Ä¢ üèÜ –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –±–∞–Ω–∫, –Ω—É–∂–Ω–æ <span className="font-semibold">–≤—ã–∏–≥—Ä–∞—Ç—å 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥</span></li>
        </ul>
      </div>
      
      {/* üåü –ñ—É—Ä–Ω–∞–ª –∏–≥—Ä—ã */}
      <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md">
        <h2 className="text-xl font-bold text-center mb-2">–ñ—É—Ä–Ω–∞–ª –∏–≥—Ä—ã:</h2>
        <ul className="text-sm space-y-1 text-gray-700">
          {gameLog.map((log, index) => (
            <li key={index}>{log}</li>
          ))}
        </ul>
      </div>
    </div>
  );
};

export default ThreePlayersGame; 