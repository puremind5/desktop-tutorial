import React, { useState } from 'react';
import Confetti from 'react-confetti';
import { Trash as Treasure } from 'lucide-react';
import GameBoard from './components/GameBoard';
import { useWindowSize } from 'react-use';

const CHEST_VALUES = { 1: 10, 2: 20, 3: 50, 4: 100 };
const GAME_COST = 20; // üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã

function App() {
  const { width, height } = useWindowSize(); // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ –¥–ª—è –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
  const [results, setResults] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [gameActive, setGameActive] = useState<boolean>(true);
  const [showConfetti, setShowConfetti] = useState<boolean>(false); // üéâ –§–ª–∞–≥ –¥–ª—è –ø–æ–∫–∞–∑–∞ –∫–æ–Ω—Ñ–µ—Ç—Ç–∏

  // üåü –°–æ—Ö—Ä–∞–Ω—è–µ–º –∑–æ–ª–æ—Ç–æ –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏ –±–æ—Ç–æ–≤
  const [totalGold, setTotalGold] = useState<{ [key: string]: number }>({
    You: 100, // –ù–∞—á–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–∞
    "Bot 1": 100,
    "Bot 2": 100,
    "Bot 3": 100,
  });

  const handleChestSelect = async (chestIndex: number) => {
    if (!gameActive) return;

    try {
      setLoading(true);
      setError(null);
      setGameActive(false);

      // üí∞ –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å –∏–≥—Ä—ã —É –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤ (–∏–≥—Ä–æ–∫–∞ –∏ –±–æ—Ç–æ–≤)
      setTotalGold(prevGold => ({
        You: prevGold["You"] - GAME_COST,
        "Bot 1": prevGold["Bot 1"] - GAME_COST,
        "Bot 2": prevGold["Bot 2"] - GAME_COST,
        "Bot 3": prevGold["Bot 3"] - GAME_COST,
      }));

      const response = await fetch('/api/game/play', {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ playerChoice: chestIndex }),
      });

      if (!response.ok) {
        throw new Error(`Server error: ${response.status}`);
      }

      const data = await response.json();
      console.log("API Response in App.tsx:", data);

      if (!data || typeof data !== 'object' || !('winner' in data)) {
        throw new Error("Invalid response format");
      }

      setResults(data);

      // üåü –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª, –∑–∞–ø—É—Å–∫–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏ –∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ
      if (data.winner === "You") {
        setShowConfetti(true); // üéâ –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏
        setTimeout(() => setShowConfetti(false), 3000); // –ß–µ—Ä–µ–∑ 3 —Å–µ–∫—É–Ω–¥—ã —É–±–∏—Ä–∞–µ–º –∫–æ–Ω—Ñ–µ—Ç—Ç–∏

        setTotalGold(prevGold => ({
          ...prevGold,
          You: prevGold["You"] + data.reward,
        }));
      }

      // –ï—Å–ª–∏ –≤—ã–∏–≥—Ä–∞–ª –±–æ—Ç, –æ–±–Ω–æ–≤–ª—è–µ–º –µ–≥–æ –∑–æ–ª–æ—Ç–æ
      if (data.winner.includes("Bot")) {
        setTotalGold(prevGold => ({
          ...prevGold,
          [data.winner]: prevGold[data.winner] + data.reward,
        }));
      }

    } catch (err) {
      setError('Failed to connect to the game server');
      console.error("Fetch error:", err);
    } finally {
      setLoading(false);
    }
  };

  const startNewRound = () => {
    setResults(null);
    setGameActive(true);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 to-purple-900 flex flex-col items-center justify-center p-4">
      {showConfetti && <Confetti width={width} height={height} />} {/* üéâ –ö–æ–Ω—Ñ–µ—Ç—Ç–∏ */}

      <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full overflow-hidden p-6">
        <div className="bg-gradient-to-r from-amber-500 to-yellow-500 p-6">
          <div className="flex items-center justify-center">
            <Treasure className="h-10 w-10 text-yellow-100 mr-3" />
            <h1 className="text-3xl font-bold text-white">–û—Ö–æ—Ç–∞ –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏</h1>
          </div>
        </div>

        {error && (
          <div className="bg-red-100 border border-red-400 text-red-700 px-4 py-3 rounded mb-4">
            {error}
          </div>
        )}

        {/* üåü –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã */}
        <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md min-h-[150px] flex flex-col justify-center">
          <h2 className="text-xl font-bold text-center mb-2">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</h2>
          <ul className="text-sm space-y-1 text-gray-700">
            <li>‚Ä¢ –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ 3 –±–æ—Ç–æ–≤</li>
            <li>‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å—É–Ω–¥—É–∫–µ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞: 10, 20, 50 –∏–ª–∏ 100 –º–æ–Ω–µ—Ç</li>
            <li>‚Ä¢ –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–æ–ª–æ—Ç–æ</li>
            <li>‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—É–Ω–¥—É–∫, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∑–æ–ª–æ—Ç–æ</li>
            <li className="font-semibold">‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä–∞—É–Ω–¥–µ: {GAME_COST} –º–æ–Ω–µ—Ç</li>
          </ul>
        </div>

        {/* üéØ –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ */}
        <GameBoard onChestSelect={handleChestSelect} loading={loading} gameActive={gameActive} />

        {/* üåü –û–±—â–∏–π —Å—á—ë—Ç + —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–≥–æ —Ä–∞—É–Ω–¥–∞ –≤ –æ–¥–Ω–æ–º –±–ª–æ–∫–µ */}
        <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md grid grid-cols-2 gap-4">
          {/* –õ–µ–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –û–±—â–∏–π —Å—á—ë—Ç */}
          <div className="text-center">
            <h2 className="text-lg font-bold mb-2">üí∞ –û–±—â–∏–π —Å—á—ë—Ç</h2>
            <ul className="text-sm text-gray-700">
              {Object.entries(totalGold).map(([player, gold]) => (
                <li key={player} className={`py-1 ${gold < 0 ? "text-red-500" : ""}`}>
                  {player}: {gold} –º–æ–Ω–µ—Ç
                </li>
              ))}
            </ul>
          </div>

          {/* –ü—Ä–∞–≤–∞—è –∫–æ–ª–æ–Ω–∫–∞: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ–∫—É—â–µ–π –∏–≥—Ä—ã */}
          <div className="text-center">
            <h2 className="text-lg font-bold mb-2">üé≤ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥</h2>
            {results ? (
              <>
                <p className="text-lg font-semibold">
                  {results.winner === "You" ? `üéâ –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ ${results.reward} –∑–æ–ª–æ—Ç–∞! üí∞` 
                    : results.winner.includes("Bot") ? `ü§ñ ${results.winner} –≤—ã–∏–≥—Ä–∞–ª ${results.reward} –∑–æ–ª–æ—Ç–∞!` 
                    : "–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª –≤ —ç—Ç–æ–º —Ä–∞—É–Ω–¥–µ."}
                </p>
                <button 
                  className="mt-4 px-4 py-2 bg-blue-500 text-white font-bold rounded-lg shadow-md hover:bg-blue-700 transition"
                  onClick={startNewRound}
                >
                  –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
              </>
            ) : (
              <p className="text-gray-500">–í—ã–±–µ—Ä–∏—Ç–µ —Å—É–Ω–¥—É–∫, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∏–≥—Ä—É</p>
            )}
          </div>
        </div>

      </div>
    </div>
  );
}

export default App;

