import React, { useState } from 'react';
import { Trash as Treasure } from 'lucide-react';
import GameBoard from './components/GameBoard';

const CHEST_VALUES = { 1: 35, 2: 50, 3: 70, 4: 100 };
const GAME_COST = 25; // üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
const BANK_THRESHOLD = 100; // üìå –ü–æ—Ä–æ–≥ –±–∞–Ω–∫–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

function App() {
  const [results, setResults] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [gameActive, setGameActive] = useState<boolean>(true);
  const [bank, setBank] = useState<number>(0); // üåü –ë–ê–ù–ö
  const [winStreak, setWinStreak] = useState<{ [key: string]: number }>({
    You: 0,
    "Bot 1": 0,
    "Bot 2": 0,
    "Bot 3": 0,
  });

  // üåü –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤
  const [totalGold, setTotalGold] = useState<{ [key: string]: number }>({
    You: 100,
    "Bot 1": 100,
    "Bot 2": 100,
    "Bot 3": 100,
  });

  const handleChestSelect = async (chestIndex: number) => {
  if (!gameActive) return;

  try {
    setLoading(true);
    setError(null);
    setGameActive(false);

    // üí∞ –í—Å–µ –∏–≥—Ä–æ–∫–∏ –ø–ª–∞—Ç—è—Ç –∑–∞ –≤—Ö–æ–¥ –≤ –∏–≥—Ä—É (100 –º–æ–Ω–µ—Ç —Å—É–º–º–∞—Ä–Ω–æ)
    setTotalGold(prevGold => ({
      You: prevGold["You"] - GAME_COST,
      "Bot 1": prevGold["Bot 1"] - GAME_COST,
      "Bot 2": prevGold["Bot 2"] - GAME_COST,
      "Bot 3": prevGold["Bot 3"] - GAME_COST,
    }));

    const response = await fetch('/api/game/play', {
      method: 'POST',
      headers: { 'Content-Type': 'application/json' },
      body: JSON.stringify({ playerChoice: chestIndex }),
    });

    if (!response.ok) {
      throw new Error(`Server error: ${response.status}`);
    }

    const data = await response.json();
    console.log("API Response in App.tsx:", data);

    if (!data || typeof data !== 'object' || !('winner' in data)) {
      throw new Error("Invalid response format");
    }

    setResults(data);

    const totalCollected = 100; // 4 –∏–≥—Ä–æ–∫–∞ –ø–æ 25 –º–æ–Ω–µ—Ç
    let totalPaidOut = data.winner !== "No winner" ? data.reward : 0;

    // üåü –ï—Å–ª–∏ –∫—Ç–æ-—Ç–æ –≤—ã–∏–≥—Ä–∞–ª, –¥–æ–±–∞–≤–ª—è–µ–º –∑–æ–ª–æ—Ç–æ –∫ –µ–≥–æ –±–∞–ª–∞–Ω—Å—É
    if (data.winner !== "No winner") {
      setTotalGold(prevGold => ({
        ...prevGold,
        [data.winner]: (prevGold[data.winner] || 0) + data.reward,
      }));

      // ‚úÖ –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥ —Ç–æ–ª—å–∫–æ —É –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      setWinStreak(prevStreak => ({
        ...prevStreak,
        [data.winner]: bank >= BANK_THRESHOLD ? (prevStreak[data.winner] || 0) + 1 : 0,
      }));

      // üèÜ –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –≤—ã–∏–≥—Ä–∞–ª 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ ‚Äì –æ–Ω –∑–∞–±–∏—Ä–∞–µ—Ç –ë–ê–ù–ö
      if (bank >= BANK_THRESHOLD && winStreak[data.winner] + 1 === 3) {
        setTotalGold(prevGold => ({
          ...prevGold,
          [data.winner]: prevGold[data.winner] + bank,
        }));
        setBank(0); // üî• –ë–ê–ù–ö –æ—á–∏—â–∞–µ—Ç—Å—è –ø–æ—Å–ª–µ –≤—ã–∏–≥—Ä—ã—à–∞
      }

      // ‚ùå –ü—Ä–æ–∏–≥—Ä–∞–≤—à–∏–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç —Å–µ—Ä–∏—é –ø–æ–±–µ–¥
      setWinStreak(prevStreak => {
        let updatedStreak = { ...prevStreak };
        Object.keys(updatedStreak).forEach(player => {
          if (player !== data.winner) {
            updatedStreak[player] = 0;
          }
        });
        return updatedStreak;
      });

    } else {
      setWinStreak({ You: 0, "Bot 1": 0, "Bot 2": 0, "Bot 3": 0 }); // ‚ùå –ï—Å–ª–∏ –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª, —Å–±—Ä–æ—Å–∏—Ç—å –í–°–ï —Å–µ—Ä–∏–∏
    }

    // üìå –í –±–∞–Ω–∫ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –¢–û–õ–¨–ö–û –Ω–µ—Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã
    const leftover = totalCollected - totalPaidOut;
    if (leftover > 0) {
      setBank(prevBank => prevBank + leftover);
    }

  } catch (err) {
    setError('Failed to connect to the game server');
    console.error("Fetch error:", err);
  } finally {
    setLoading(false);
  }
};

  const startNewRound = () => {
    setResults(null);
    setGameActive(true);
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 to-purple-900 flex flex-col items-center justify-center p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full overflow-hidden p-6">
        <div className="bg-gradient-to-r from-amber-500 to-yellow-500 p-6">
          <div className="flex items-center justify-center">
            <Treasure className="h-10 w-10 text-yellow-100 mr-3" />
            <h1 className="text-3xl font-bold text-white">–û—Ö–æ—Ç–∞ –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏</h1>
             {/* üåü –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º */}<br />
            <h2 className="text-2xl font-bold text-center text-white mt-6">–í—ã–±–µ—Ä–∏ —Å—É–Ω–¥—É–∫</h2>
        </div>
       
        
                {/* üéØ –ò–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ */}
        <GameBoard onChestSelect={handleChestSelect} loading={loading} gameActive={gameActive} />

        {/* üåü –ë–∞–Ω–∫ */}
        <div className="mt-6 p-4 bg-gray-100 rounded-lg shadow-md text-center">
          <h2 className="text-lg font-bold">üè¶ –ë–∞–Ω–∫: {bank} –º–æ–Ω–µ—Ç</h2>
          {bank >= BANK_THRESHOLD && <p className="text-red-500 font-semibold">üî• –ë–∞–Ω–∫ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å!</p>}
        </div>

        {/* üåü –û–±—â–∏–π —Å—á—ë—Ç + —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ (–∫–∞–∫ –±—ã–ª–æ) */}
        <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md grid grid-cols-2 gap-4">
          {/* –û–±—â–∏–π —Å—á—ë—Ç (—Å–ª–µ–≤–∞) */}
          <div className="text-center">
            <h2 className="text-lg font-bold mb-2">üí∞ –û–±—â–∏–π —Å—á—ë—Ç</h2>

            <ul className="text-sm text-gray-700">
              {Object.entries(totalGold).map(([player, gold]) => (
              <li key={player} className={`py-1 ${gold < 0 ? "text-red-500" : ""}`}>
              {player}: {gold} –º–æ–Ω–µ—Ç{" "}
              {winStreak[player] >= 3 ? "üî•üî•üî•" : winStreak[player] === 2 ? "üî•üî•" : bank >= BANK_THRESHOLD ? `(üî• ${winStreak[player]} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥)` : ""}
              </li>
             ))}
            </ul>
            
          </div>

          {/* –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ (—Å–ø—Ä–∞–≤–∞) */}
          {results && (
            <div className="text-center">
              <h2 className="text-lg font-bold mb-2">üé≤ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥</h2>
              <p className="text-lg font-semibold">
                {results.winner !== "No winner" ? `üèÜ ${results.winner} –≤—ã–∏–≥—Ä–∞–ª ${results.reward} –º–æ–Ω–µ—Ç!` : "–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª."}
              </p>
              <ul className="text-sm text-gray-700 mt-2">
                <li className="font-semibold">üßë –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—É–Ω–¥—É–∫ {results.playerChoice}</li>
                {results.botChoices.map((choice: number, index: number) => (
                  <li key={index}>ü§ñ –ë–æ—Ç {index + 1} –≤—ã–±—Ä–∞–ª —Å—É–Ω–¥—É–∫ {choice}</li>
                ))}
              </ul>
            </div>
          )}
        </div>

        {/* üåü –ö–Ω–æ–ø–∫–∞ "–ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞" –ø–æ —Ü–µ–Ω—Ç—Ä—É –≤–Ω–∏–∑—É */}
        {results && (
          <div className="flex justify-center mt-4">
            <button 
              className="px-4 py-2 bg-blue-500 text-white font-bold rounded-lg shadow-md hover:bg-blue-700 transition"
              onClick={startNewRound}
            >
              –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
            </button>
          </div>
        )}
      {/* üåü –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã (—Ç–µ–ø–µ—Ä—å –≤–Ω–∏–∑—É) */}
        <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md">
          <h2 className="text-xl font-bold text-center mb-2">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</h2>
          <ul className="text-sm space-y-1 text-gray-700">
            <li>‚Ä¢ –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ 3 –±–æ—Ç–æ–≤</li>
            <li>‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å—É–Ω–¥—É–∫–µ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞: 35, 50, 70 –∏–ª–∏ 100 –º–æ–Ω–µ—Ç</li>
            <li>‚Ä¢ –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–æ–ª–æ—Ç–æ</li>
            <li>‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—É–Ω–¥—É–∫, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∑–æ–ª–æ—Ç–æ</li>
            <li className="font-semibold">‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä–∞—É–Ω–¥–µ: {GAME_COST} –º–æ–Ω–µ—Ç</li>
          </ul>
        </div>
      </div>
    </div>
  );
}

export default App;


