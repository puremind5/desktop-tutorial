import React, { useState, useEffect } from 'react';
import { Trash as Treasure } from 'lucide-react';
import GameBoard2 from './components/GameBoard2';
import BankGame from './BankGame';
import ThreePlayersGame from './ThreePlayersGame';
import Players from './components/Players';
import axios from 'axios';
import './App.css';

const CHEST_VALUES = { 1: 35, 2: 50, 3: 70, 4: 100 };
const GAME_COST = 25; // üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å –∫–∞–∂–¥–æ–π –∏–≥—Ä—ã
const BANK_THRESHOLD = 100; // üìå –ü–æ—Ä–æ–≥ –±–∞–Ω–∫–∞ –¥–ª—è —Ä–æ–∑—ã–≥—Ä—ã—à–∞

function App() {
  const [results, setResults] = useState<any>(null);
  const [loading, setLoading] = useState<boolean>(false);
  const [error, setError] = useState<string | null>(null);
  const [gameActive, setGameActive] = useState<boolean>(true);
  const [bank, setBank] = useState<number>(0); // üåü –ë–ê–ù–ö
  const [winStreak, setWinStreak] = useState<{ [key: string]: number }>({
    You: 0,
    "–ê–ª–∏—Å–∞": 0,
    "–û–ª–µ–≥": 0,
    "–°–∏—Ä–∏": 0,
  });

  // üåü –ë–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤
  const [totalGold, setTotalGold] = useState<{ [key: string]: number }>({
    You: 100,
    "–ê–ª–∏—Å–∞": 100,
    "–û–ª–µ–≥": 100,
    "–°–∏—Ä–∏": 100,
  });

  const [gameVersion, setGameVersion] = useState<'original' | 'bank' | 'three-players'>('original');
  const [timeLeft, setTimeLeft] = useState(10); // –î–æ–±–∞–≤–ª—è–µ–º –≤—Ä–µ–º—è –¥–ª—è —Ç–∞–π–º–µ—Ä–∞
  const [playersMadeChoice, setPlayersMadeChoice] = useState<Record<string, boolean>>({
    'You': false,
    '–ê–ª–∏—Å–∞': false,
    '–û–ª–µ–≥': false,
    '–°–∏—Ä–∏': false
  });

  const [playerChoice, setPlayerChoice] = useState<number | null>(null);

  // –¢–∞–π–º–µ—Ä
  useEffect(() => {
    let timer: NodeJS.Timeout | null = null;
    
    if (gameActive) {
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ–≤–æ–≥–æ —Ä–∞—É–Ω–¥–∞
      setTimeLeft(10);
      console.log('–ó–∞–ø—É—Å–∫ —Ç–∞–π–º–µ—Ä–∞, gameActive =', gameActive);
      
      // –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–∞–π–º–µ—Ä
      timer = setInterval(() => {
        setTimeLeft(prevTime => {
          console.log('–¢–∞–π–º–µ—Ä: –æ—Å—Ç–∞–ª–æ—Å—å', prevTime, '—Å–µ–∫—É–Ω–¥');
          // –ö–æ–≥–¥–∞ –≤—Ä–µ–º—è –∏—Å—Ç–µ–∫–ª–æ
          if (prevTime <= 1) {
            console.log('–¢–∞–π–º–µ—Ä –∑–∞–∫–æ–Ω—á–∏–ª—Å—è!');
            clearInterval(timer!);
            
            // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É–Ω–¥—É–∫
            if (!playersMadeChoice['You']) {
              console.log('–ò–≥—Ä–æ–∫ –Ω–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π —Å—É–Ω–¥—É–∫');
              const randomChest = Math.floor(Math.random() * 4) + 1;
              setPlayerChoice(randomChest);
              setPlayersMadeChoice(prev => ({
                ...prev,
                'You': true
              }));
              
              // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥ —Å –≤—ã–±–æ—Ä–æ–º –∑–∞ –∏–≥—Ä–æ–∫–∞
              console.log('–í—ã–∑—ã–≤–∞–µ–º finishRound —Å —Å–ª—É—á–∞–π–Ω—ã–º –≤—ã–±–æ—Ä–æ–º:', randomChest);
              finishRound(randomChest);
            } else if (playerChoice !== null) {
              // –ï—Å–ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥ —Å –µ–≥–æ –≤—ã–±–æ—Ä–æ–º
              console.log('–ò–≥—Ä–æ–∫ —É–∂–µ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä:', playerChoice, '–≤—ã–∑—ã–≤–∞–µ–º finishRound');
              finishRound(playerChoice);
            } else {
              console.log('–û—à–∏–±–∫–∞: playersMadeChoice[You] = true, –Ω–æ playerChoice = null');
            }
            
            return 0;
          }
          return prevTime - 1;
        });
      }, 1000);
    }
    
    return () => {
      if (timer) {
        console.log('–û—á–∏—â–∞–µ–º —Ç–∞–π–º–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞');
        clearInterval(timer);
      }
    };
  }, [gameActive]);

  // –ü—Ä–æ–≤–µ—Ä–∫–∞, —Å–¥–µ–ª–∞–ª–∏ –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±–æ—Ä
  useEffect(() => {
    // –ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –≤–æ –≤—Ä–µ–º—è –∞–∫—Ç–∏–≤–Ω–æ–π –∏–≥—Ä—ã
    if (!gameActive || !playerChoice) return;
    
    // –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–æ—Ä–æ–≤ –≤—Å–µ—Ö –∏–≥—Ä–æ–∫–æ–≤
    const checkInterval = setInterval(() => {
      console.log('–ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª–∏ –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±–æ—Ä:', playersMadeChoice);
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å–¥–µ–ª–∞–ª–∏ –ª–∏ –≤—Å–µ –∏–≥—Ä–æ–∫–∏ –≤—ã–±–æ—Ä
      const allPlayersChose = Object.values(playersMadeChoice).every(choice => choice === true);
      
      if (allPlayersChose) {
        console.log('–í—Å–µ –∏–≥—Ä–æ–∫–∏ —Å–¥–µ–ª–∞–ª–∏ –≤—ã–±–æ—Ä! –ó–∞–∫–∞–Ω—á–∏–≤–∞–µ–º —Ä–∞—É–Ω–¥ –¥–æ—Å—Ä–æ—á–Ω–æ.');
        clearInterval(checkInterval);
        
        // –ó–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥ —Å –≤—ã–±–æ—Ä–æ–º –∏–≥—Ä–æ–∫–∞
        finishRound(playerChoice);
      }
    }, 1000); // –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
    
    return () => {
      clearInterval(checkInterval);
    };
  }, [playersMadeChoice, gameActive, playerChoice]);

  const handleChestSelect = (chestIndex: number) => {
    if (!gameActive) return;
    
    console.log('–ò–≥—Ä–æ–∫ –≤—ã–±—Ä–∞–ª —Å—É–Ω–¥—É–∫:', chestIndex);

    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    setPlayerChoice(chestIndex);
    
    // –û—Ç–º–µ—á–∞–µ–º, —á—Ç–æ –∏–≥—Ä–æ–∫ —Å–¥–µ–ª–∞–ª –≤—ã–±–æ—Ä
    setPlayersMadeChoice(prev => ({
      ...prev,
      'You': true
    }));

    // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∑–∞–≤–µ—Ä—à–∞–µ–º —Ä–∞—É–Ω–¥ —Å—Ä–∞–∑—É
    if (timeLeft <= 0) {
      console.log('–¢–∞–π–º–µ—Ä —É–∂–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –≤—ã–∑—ã–≤–∞–µ–º finishRound –Ω–∞–ø—Ä—è–º—É—é');
      finishRound(chestIndex);
    } else {
      console.log('–¢–∞–π–º–µ—Ä –µ—â—ë –Ω–µ –∑–∞–∫–æ–Ω—á–∏–ª—Å—è, –∂–¥–µ–º –µ–≥–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è');
    }
  };

  // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
  const determineWinner = (playerChoice: number, botChoices: number[], reward: number) => {
    // –¶–µ–Ω–Ω–æ—Å—Ç—å —Å—É–Ω–¥—É–∫–æ–≤ (–∏–Ω–¥–µ–∫—Å + 1 = –Ω–æ–º–µ—Ä —Å—É–Ω–¥—É–∫–∞)
    const chestValues = [35, 50, 70, 100];
    
    // –ò–º–µ–Ω–∞ –±–æ—Ç–æ–≤
    const botNames = ['–ê–ª–∏—Å–∞', '–û–ª–µ–≥', '–°–∏—Ä–∏'];
    
    // –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –≤—ã–±–æ—Ä—ã –≤ –æ–¥–∏–Ω –º–∞—Å—Å–∏–≤
    const allChoices = [...botChoices];
    
    // –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç, –≥–¥–µ –∫–ª—é—á - –Ω–æ–º–µ—Ä —Å—É–Ω–¥—É–∫–∞, –∑–Ω–∞—á–µ–Ω–∏–µ - –º–∞—Å—Å–∏–≤ –∏–≥—Ä–æ–∫–æ–≤, –≤—ã–±—Ä–∞–≤—à–∏—Ö —ç—Ç–æ—Ç —Å—É–Ω–¥—É–∫
    const choiceMap: Record<number, string[]> = {
      1: [],
      2: [],
      3: [],
      4: []
    };
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    choiceMap[playerChoice].push('You');
    
    // –î–æ–±–∞–≤–ª—è–µ–º –≤—ã–±–æ—Ä—ã –±–æ—Ç–æ–≤
    botChoices.forEach((choice, index) => {
      choiceMap[choice].push(botNames[index]);
    });
    
    console.log('–ö–∞—Ä—Ç–∞ –≤—ã–±–æ—Ä–æ–≤:', choiceMap);
    
    // –ù–∞—Ö–æ–¥–∏–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã (—Å—É–Ω–¥—É–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –≤—ã–±—Ä–∞–ª —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –∏–≥—Ä–æ–∫)
    const uniqueChoices: {chest: number, player: string, value: number}[] = [];
    
    Object.entries(choiceMap).forEach(([chest, players]) => {
      const chestNumber = parseInt(chest);
      if (players.length === 1) {
        // –≠—Ç–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã–π –≤—ã–±–æ—Ä
        uniqueChoices.push({
          chest: chestNumber,
          player: players[0],
          value: chestValues[chestNumber - 1]
        });
      }
    });
    
    console.log('–£–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã:', uniqueChoices);
    
    // –ï—Å–ª–∏ –µ—Å—Ç—å —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –≤—ã–±–æ—Ä—ã, –Ω–∞—Ö–æ–¥–∏–º —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π
    if (uniqueChoices.length > 0) {
      // –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —É–±—ã–≤–∞–Ω–∏—é —Ü–µ–Ω–Ω–æ—Å—Ç–∏
      uniqueChoices.sort((a, b) => b.value - a.value);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–≥—Ä–æ–∫–∞ —Å —Å–∞–º—ã–º —Ü–µ–Ω–Ω—ã–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –≤—ã–±–æ—Ä–æ–º
      console.log('–ü–æ–±–µ–¥–∏—Ç–µ–ª—å:', uniqueChoices[0].player, '—Å —Å—É–Ω–¥—É–∫–æ–º', uniqueChoices[0].chest, '(', uniqueChoices[0].value, '–∑–æ–ª–æ—Ç–∞)');
      return uniqueChoices[0].player;
    }
    
    // –ï—Å–ª–∏ –Ω–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤, –Ω–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä—ã–≤–∞–µ—Ç
    console.log('–ù–µ—Ç —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –≤—ã–±–æ—Ä–æ–≤, –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è');
    return 'No winner';
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–∫ –∏ –∑–æ–ª–æ—Ç–æ
  const updateBankAndGold = (winner: string, reward: number) => {
    // –ï—Å–ª–∏ –µ—Å—Ç—å –ø–æ–±–µ–¥–∏—Ç–µ–ª—å, –¥–æ–±–∞–≤–ª—è–µ–º –µ–º—É –Ω–∞–≥—Ä–∞–¥—É
    if (winner !== 'No winner') {
      setTotalGold(prev => ({
        ...prev,
        [winner]: prev[winner] + reward
      }));
    }
    
    // –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ—Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω–æ–µ –∑–æ–ª–æ—Ç–æ –≤ –±–∞–Ω–∫
    if (winner === 'No winner') {
      setBank(prev => prev + GAME_COST * 4); // –í—Å–µ 4 –∏–≥—Ä–æ–∫–∞ –∑–∞–ø–ª–∞—Ç–∏–ª–∏, –Ω–æ –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∏–ª
    } else {
      setBank(prev => prev + (GAME_COST * 4 - reward)); // –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–Ω–∏—Ü—É –º–µ–∂–¥—É –ø–ª–∞—Ç–æ–π –∏ –Ω–∞–≥—Ä–∞–¥–æ–π
    }
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥
  const updateWinStreaks = (winner: string) => {
    if (winner !== 'No winner') {
      // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å–µ—Ä–∏—é –ø–æ–±–µ–¥ –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      setWinStreak(prev => ({
        ...prev,
        [winner]: prev[winner] + 1
      }));
      
      // –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–µ—Ä–∏–∏ –ø–æ–±–µ–¥ –ø—Ä–æ–∏–≥—Ä–∞–≤—à–∏—Ö
      setWinStreak(prev => {
        const newStreak = { ...prev };
        Object.keys(newStreak).forEach(player => {
          if (player !== winner) {
            newStreak[player] = 0;
          }
        });
        return newStreak;
      });
      
      // –ï—Å–ª–∏ –ø–æ–±–µ–¥–∏—Ç–µ–ª—å –≤—ã–∏–≥—Ä–∞–ª 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥ –∏ –±–∞–Ω–∫ –¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –±–æ–ª—å—à–æ–π
      if (winStreak[winner] + 1 >= 3 && bank >= BANK_THRESHOLD) {
        // –í—ã–ø–ª–∞—á–∏–≤–∞–µ–º –±–∞–Ω–∫ –ø–æ–±–µ–¥–∏—Ç–µ–ª—é
        setTotalGold(prev => ({
          ...prev,
          [winner]: prev[winner] + bank
        }));
        setBank(0); // –û–±–Ω—É–ª—è–µ–º –±–∞–Ω–∫
      }
    } else {
      // –ï—Å–ª–∏ –Ω–µ—Ç –ø–æ–±–µ–¥–∏—Ç–µ–ª—è, –≤—Å–µ —Å–µ—Ä–∏–∏ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç—Å—è
      setWinStreak({
        'You': 0,
        '–ê–ª–∏—Å–∞': 0,
        '–û–ª–µ–≥': 0,
        '–°–∏—Ä–∏': 0
      });
    }
  };

  // –í—ã–Ω–µ—Å–µ–º –ª–æ–≥–∏–∫—É –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–∞—É–Ω–¥–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é
  const finishRound = (chestIndex: number) => {
    console.log('–§—É–Ω–∫—Ü–∏—è finishRound –Ω–∞—á–∞–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
    try {
      setLoading(true);
      setError(null);
      setGameActive(false);

      // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ª–æ–∫–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
      const botChoices = [
        Math.floor(Math.random() * 4) + 1,
        Math.floor(Math.random() * 4) + 1,
        Math.floor(Math.random() * 4) + 1
      ];
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –Ω–∞–≥—Ä–∞–¥—É (35, 50, 70 –∏–ª–∏ 100)
      const reward = [35, 50, 70, 100][Math.floor(Math.random() * 4)];
      
      console.log('–î–∞–Ω–Ω—ã–µ –¥–ª—è –∏–≥—Ä—ã:', { playerChoice: chestIndex, botChoices, reward });
      
      // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–æ–±–µ–¥–∏—Ç–µ–ª—è
      const winner = determineWinner(chestIndex, botChoices, reward);
      console.log('–û–ø—Ä–µ–¥–µ–ª–µ–Ω –ø–æ–±–µ–¥–∏—Ç–µ–ª—å:', winner);

      // –û–±–Ω–æ–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      const results = {
        winner,
        reward,
        playerChoice: chestIndex,
        botChoices,
        botNames: ['–ê–ª–∏—Å–∞', '–û–ª–µ–≥', '–°–∏—Ä–∏'] // –î–æ–±–∞–≤–ª—è–µ–º –∏–º–µ–Ω–∞ –±–æ—Ç–æ–≤ –≤ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
      };
      
      console.log('–£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:', results);
      setResults(results);

      // –û–±–Ω–æ–≤–ª—è–µ–º –±–∞–Ω–∫, –±–∞–ª–∞–Ω—Å –∏–≥—Ä–æ–∫–æ–≤ –∏ —Å–µ—Ä–∏—é –ø–æ–±–µ–¥
      updateBankAndGold(winner, reward);
      updateWinStreaks(winner);

      setLoading(false);
      console.log('–§—É–Ω–∫—Ü–∏—è finishRound –∑–∞–≤–µ—Ä—à–∏–ª–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ');
    } catch (error) {
      console.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ñ–∏–Ω–∞–ª–∏–∑–∞—Ü–∏–∏ —Ä–∞—É–Ω–¥–∞:", error);
      setError("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.");
      setLoading(false);
    }
  };

  const startNewRound = () => {
    setGameActive(true);
    setResults(null);
    setError(null);
    setPlayerChoice(null); // –°–±—Ä–∞—Å—ã–≤–∞–µ–º –≤—ã–±–æ—Ä –∏–≥—Ä–æ–∫–∞
    
    // –í—ã—á–∏—Ç–∞–µ–º —Å—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è —É –∫–∞–∂–¥–æ–≥–æ –∏–≥—Ä–æ–∫–∞
    setTotalGold(prev => ({
      'You': prev['You'] - GAME_COST,
      '–ê–ª–∏—Å–∞': prev['–ê–ª–∏—Å–∞'] - GAME_COST,
      '–û–ª–µ–≥': prev['–û–ª–µ–≥'] - GAME_COST,
      '–°–∏—Ä–∏': prev['–°–∏—Ä–∏'] - GAME_COST
    }));
    
    setPlayersMadeChoice({
      'You': false,
      '–ê–ª–∏—Å–∞': false,
      '–û–ª–µ–≥': false,
      '–°–∏—Ä–∏': false
    });
    console.log("–ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤—ã–π —Ä–∞—É–Ω–¥");
  };

  return (
    <div className="min-h-screen bg-gradient-to-br from-indigo-900 to-purple-900 flex flex-col items-center justify-center p-4">
      <div className="bg-white rounded-xl shadow-2xl max-w-4xl w-full overflow-hidden p-6">
        <div className="bg-gradient-to-r from-amber-500 to-yellow-500 p-6">
          <div className="flex items-center justify-center">
            <Treasure className="h-10 w-10 text-yellow-100 mr-3" />
             <h1 className="text-xl md:text-3xl font-bold text-white whitespace-nowrap">–û—Ö–æ—Ç–∞ –∑–∞ —Å–æ–∫—Ä–æ–≤–∏—â–∞–º–∏</h1>
             {/* üåü –ó–∞–≥–æ–ª–æ–≤–æ–∫ –ø–µ—Ä–µ–¥ –∏–≥—Ä–æ–≤—ã–º –ø–æ–ª–µ–º */}
          </div>
        </div>
        
        {/* –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –≤–µ—Ä—Å–∏–π –∏–≥—Ä—ã */}
        <div className="flex justify-center mt-4 mb-4">
          <button 
            className={`px-4 py-2 ${gameVersion === 'original' ? 'bg-blue-600 text-white' : 'bg-gray-200'} ${gameVersion === 'original' ? '' : 'rounded-l-lg'}`}
            onClick={() => setGameVersion('original')}
          >
            –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–∞
          </button>
          <button 
            className={`px-4 py-2 ${gameVersion === 'bank' ? 'bg-blue-600 text-white' : 'bg-gray-200'}`}
            onClick={() => setGameVersion('bank')}
          >
            –ò–≥—Ä–∞ —Å –ë–ê–ù–ö–û–ú
          </button>
          <button 
            className={`px-4 py-2 ${gameVersion === 'three-players' ? 'bg-blue-600 text-white' : 'bg-gray-200'} ${gameVersion === 'three-players' ? '' : 'rounded-r-lg'}`}
            onClick={() => setGameVersion('three-players')}
          >
            3 –∏–≥—Ä–æ–∫–∞ / 3 —Å—É–Ω–¥—É–∫–∞
          </button>
        </div>
        
        {gameVersion === 'original' ? (
          <>
            {/* –°–æ–∑–¥–∞–µ–º –æ–±—â–∏–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –¥–ª—è –∏–≥—Ä—ã */}
            <div className="game-container">
              {/* üéØ –û—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–∞—è –∏–≥—Ä–æ–≤–∞—è –¥–æ—Å–∫–∞ */}
              <GameBoard2 
                onChestSelect={handleChestSelect} 
                loading={loading} 
                gameActive={gameActive} 
                selectedChest={playerChoice}
              />
              
              {/* –û–±–µ—Ä—Ç–∫–∞ –¥–ª—è –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞ Players */}
              <div className="players-wrapper">
                <Players 
                  results={results} 
                  timeLeft={timeLeft} 
                  gameActive={gameActive} 
                  playersMadeChoice={playersMadeChoice}
                  setPlayersMadeChoice={setPlayersMadeChoice}
                />
              </div>
            </div>
            
            {results && (
              <div className="flex justify-center -mt-10">
                <button 
                className="px-5 py-3 bg-blue-500 text-white text-lg font-bold rounded-lg shadow-md hover:bg-blue-700 transition"
                onClick={startNewRound}
                >
                üîÑ –ò–≥—Ä–∞—Ç—å —Å–Ω–æ–≤–∞
                </button>
              </div>
            )}

            {/* üåü –ë–∞–Ω–∫ */}
            <div className="mt-6 p-4 bg-gray-100 rounded-lg shadow-md text-center">
              <h2 className="text-lg font-bold">üè¶ –ë–∞–Ω–∫: {bank} –º–æ–Ω–µ—Ç</h2>
              {bank >= BANK_THRESHOLD && <p className="text-red-500 font-semibold">üî• –ë–∞–Ω–∫ —Ç–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å!</p>}
            </div>

            {/* üåü –û–±—â–∏–π —Å—á—ë—Ç + —Ç–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ (–∫–∞–∫ –±—ã–ª–æ) */}
            <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md grid grid-cols-1 md:grid-cols-2 gap-4">
              {/* –û–±—â–∏–π —Å—á—ë—Ç (—Å–ª–µ–≤–∞) */}
              <div className="text-center">
                <h2 className="text-lg font-bold mb-2">üí∞ –û–±—â–∏–π —Å—á—ë—Ç</h2>

                <ul className="text-sm text-gray-700">
                  {Object.entries(totalGold).map(([player, gold]) => (
                  <li key={player} className={`py-1 ${gold < 0 ? "text-red-500" : ""}`}>
                  {player}: {gold} –º–æ–Ω–µ—Ç{" "}
                  {winStreak[player] >= 3 ? "üî•üî•üî•" : winStreak[player] === 2 ? "üî•üî•" : bank >= BANK_THRESHOLD ? `(üî• ${winStreak[player]} –ø–æ–±–µ–¥ –ø–æ–¥—Ä—è–¥)` : ""}
                  </li>
                ))}
                </ul>
                
              </div>

              {/* –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥ (—Å–ø—Ä–∞–≤–∞) */}
              {results && (
                <div className="text-center">
                  <h2 className="text-lg font-bold mb-2">üé≤ –¢–µ–∫—É—â–∏–π —Ä–∞—É–Ω–¥</h2>
                  <p className="text-lg font-semibold">
                    {results.winner !== "No winner" ? `üèÜ ${results.winner} –≤—ã–∏–≥—Ä–∞–ª ${results.reward} –º–æ–Ω–µ—Ç!` : "–ù–∏–∫—Ç–æ –Ω–µ –≤—ã–∏–≥—Ä–∞–ª."}
                  </p>
                  <ul className="text-sm text-gray-700 mt-2">
                    <li className="font-semibold">üßë –í—ã –≤—ã–±—Ä–∞–ª–∏ —Å—É–Ω–¥—É–∫ {results.playerChoice}</li>
                    {results.botChoices.map((choice: number, index: number) => (
                      <li key={index}>ü§ñ {results.botNames[index]} –≤—ã–±—Ä–∞–ª{results.botNames[index] === '–ê–ª–∏—Å–∞' ? '–∞' : ''} —Å—É–Ω–¥—É–∫ {choice}</li>
                    ))}
                  </ul>
                </div>
              )}
            </div>

            {/* üåü –û–ø–∏—Å–∞–Ω–∏–µ –∏–≥—Ä—ã (—Ç–µ–ø–µ—Ä—å –≤–Ω–∏–∑—É) */}
            <div className="mt-6 p-6 bg-gray-100 rounded-lg shadow-md">
              <h2 className="text-xl font-bold text-center mb-2">–ö–∞–∫ –∏–≥—Ä–∞—Ç—å:</h2>
              <ul className="text-sm space-y-1 text-gray-700">
                <li>‚Ä¢ –í—ã –∏–≥—Ä–∞–µ—Ç–µ –ø—Ä–æ—Ç–∏–≤ 3 –±–æ—Ç–æ–≤</li>
                <li>‚Ä¢ –í –∫–∞–∂–¥–æ–º —Å—É–Ω–¥—É–∫–µ —Ä–∞–∑–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–æ–ª–æ—Ç–∞: 35, 50, 70 –∏–ª–∏ 100 –º–æ–Ω–µ—Ç</li>
                <li>‚Ä¢ –ï—Å–ª–∏ —Ç–æ–ª—å–∫–æ –≤—ã –≤—ã–±—Ä–∞–ª–∏ —Å–∞–º—ã–π —Ü–µ–Ω–Ω—ã–π —Å—É–Ω–¥—É–∫, –≤—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –∑–æ–ª–æ—Ç–æ</li>
                <li>‚Ä¢ –ï—Å–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∏–≥—Ä–æ–∫–æ–≤ –≤—ã–±—Ä–∞–ª–∏ –æ–¥–∏–Ω –∏ —Ç–æ—Ç –∂–µ —Å—É–Ω–¥—É–∫, –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç –∑–æ–ª–æ—Ç–æ</li>
                <li className="font-semibold">‚Ä¢ üí∞ –°—Ç–æ–∏–º–æ—Å—Ç—å —É—á–∞—Å—Ç–∏—è –≤ —Ä–∞—É–Ω–¥–µ: {GAME_COST} –º–æ–Ω–µ—Ç</li>
                <li>‚Ä¢ üè¶ <span className="font-semibold">–ë–∞–Ω–∫</span>: –Ω–µ—Ä–∞–∑—ã–≥—Ä–∞–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –ø–æ–ø–∞–¥–∞—é—Ç –≤ –±–∞–Ω–∫</li>
                <li>‚Ä¢ üî• –ö–æ–≥–¥–∞ –≤ –±–∞–Ω–∫–µ –Ω–∞–∫–∞–ø–ª–∏–≤–∞–µ—Ç—Å—è {BANK_THRESHOLD} –º–æ–Ω–µ—Ç, –µ–≥–æ –º–æ–∂–Ω–æ –≤—ã–∏–≥—Ä–∞—Ç—å</li>
                <li>‚Ä¢ üèÜ –ß—Ç–æ–±—ã –∑–∞–±—Ä–∞—Ç—å –±–∞–Ω–∫, –Ω—É–∂–Ω–æ <span className="font-semibold">–≤—ã–∏–≥—Ä–∞—Ç—å 3 —Ä–∞–∑–∞ –ø–æ–¥—Ä—è–¥</span></li>
              </ul>
            </div>
          </>
        ) : gameVersion === 'bank' ? (
          <BankGame />
        ) : (
          <ThreePlayersGame />
        )}
      </div>
    </div>
  );
}

export default App;
